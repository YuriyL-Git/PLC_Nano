#include <GyverEncoder.h>
#include <DS1302.h> //Библиотека часов
#include <LiquidCrystal.h>//Библиотека для работы с дисплеем
#include <OneWire.h>
#include <DallasTemperature.h>
#define ONE_WIRE_BUS 8
// Setup a oneWire instance to communicate with any OneWire devices
OneWire oneWire(ONE_WIRE_BUS);
#include <EEPROM.h>
#include <avr/wdt.h>
// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors(&oneWire);

DS1302 rtc(10, 9, 7);
Time ti;//Переменная даты
LiquidCrystal lcd(12, 11, 2, 3, 4, 5); //Инициализация дисплея с номерами пинов
Encoder enc1(A2, A1, 6, TYPE1); // инициализация єнкодер (апин CLK, пин DT,  пин SW, тип)

/****************************************************************************************/
int Ventil = A0;//A0 Определение пина для управления вентиляторами друти
int Lampa = A3;//A3 Определение пина для управления реле 220 В для светодиодной лампы  3-й конектор
int Compressor = A4;//A4 компрессор 1-й коннектор
int Hitter = A5 ;// A5 нагреватель 2-й коннектор

/****************************************************************************************/
byte Ven; // сменные для запоминания состояния устройств
byte Lam;
byte Comp;
byte Hit;

int Choise=14;//выбор настройки, если 13 показыать основные значения

struct strAjustments
{
float temperature ; //1 Глобальная переменная для хранения нужного значения температуры
int VentilTime;    //2 Глобальная переменная для хранения нвремени работы вентилятора
int VentilFreqTime; //3 Глобальная переменная для хранения частоты включения вентиляторов
int VentilLowTime; //4 Глобальная переменная для хранения  нижний лимит времени включения вентиляторов
int VentilHighTime; // 5 Глобальная переменная для хранения  верзний лимит времени включения вентиляторов
int CompressTime; // 6 Глобальная переменная для хранения времени работы компрессора
int CompressFreqTime;//7 Глобальная переменная для хранения частоты включения компрессора
int CompressLowTime;// 8 Глобальная переменная для хранения  нижний лимит времени включения компрессора
int CompressHighTime; //9 Глобальная переменная для хранения  верхний лимит времени включения компрессора
int LampaLowTime; // 10 Глобальная переменная для хранения  нижний лимит времени включения лампы
int LampaHighTime; //11 Глобальная переменная для хранения  верхний лимит времени включения лампы
};
strAjustments Ajust;


String temp = ""; //Переменная для вывода температуры
String hum = ""; //Переменная для вывода влажности
long lastUpdateTime = 0; // Переменная для хранения времени последнего считывания с датчика
float tempC;
const int TEMP_UPDATE_TIME = 2000; // Определяем периодичность проверок датчика
int Minutess; //переменная для хранения количество времени в минутах на данный момент
int Hourss; //переменная для хранения количество времени в часах на данный момент
int K;



void setup()
{
wdt_enable (WDTO_4S);
sensors.begin();
  lcd.begin(16, 2); //Установка количества колонок и строк на дисплее
  digitalWrite(Ventil, HIGH);
  pinMode(Ventil, OUTPUT);//вентиляторы
  pinMode(Lampa, OUTPUT);//подсветка
  pinMode(Compressor, OUTPUT);//компрессор
  pinMode(Hitter, OUTPUT);//нагреватель
  getEEPROM ();
  rtc.halt(false);  //Запуск часов
  //Установим время, и отключим защиту от записи
  rtc.writeProtect(false);

//  Если у вас в DS1302 уже сохранено установленное время, то нужно за комментировать
 /*rtc.setDOW(SATURDAY);        // Устанавливаем день недели SATURDAY
 rtc.setTime(20, 26, 00);     // Устанавливаем время 20:30:10 (24часа формат времени)
  rtc.setDate(24, 11, 2019);   // Устанавливаем число месяц и год*/
}


/******************ОСНОВНАЯ ПРОГРАММА!!!!*********************************************************/

void loop()
{
wdt_reset();
/* обработка энкодера***********************************************************************/
enc1.tick();

if (enc1.isClick()) //при нажатии на кнопку возвращаемся в главное меню и сохраняем данные
{Choise = 14;
lcd.clear();
saveEEPROM ();
}

//регулируем значение Choise енкодером
if (enc1.isRightH())
{ Choise = Choise + 1;
  if (Choise>12) Choise = 1;
  lcd.clear();
  };
if (enc1.isLeftH())
{Choise = Choise-1;
 if (Choise < 1) Choise = 13;
 lcd.clear();
  };
 //*********************************//



/**** ОСНОВНОЕ МЕНЮ**********************************/

if (Choise != 14)
{

     if (Choise == 1)
   {   lcd.setCursor(0, 0);
       lcd.print("1. Temperature");
       lcd.setCursor(5, 1);
       lcd.print(Ajust.temperature);
       lcd.print(" C");

       if (enc1.isRight())
        {lcd.clear();
          Ajust.temperature = Ajust.temperature + 0.1;
        }
      if (enc1.isLeft())
     {
      lcd.clear();
     if (Ajust.temperature>15) Ajust.temperature = Ajust.temperature - 0.1;

     }
   }

   if (Choise == 2)
   {   lcd.setCursor(0, 0);
       lcd.print("2. Fan wrk. time");
       lcd.setCursor(5, 1);
       lcd.print(Ajust.VentilTime);
       lcd.print(" min");
       if (enc1.isRight())
        {lcd.clear();
          Ajust.VentilTime = Ajust.VentilTime + 5;
        }
      if (enc1.isLeft())
     {
      lcd.clear();
     if (Ajust.VentilTime>0) Ajust.VentilTime = Ajust.VentilTime - 5;

     }
   }

    if (Choise == 3)
   {   lcd.setCursor(0, 0);
       lcd.print("3.Fan wrk. period");
       lcd.setCursor(5, 1);
       lcd.print(Ajust.VentilFreqTime);
       lcd.print(" min");
       if (enc1.isRight())
        {lcd.clear();
         Ajust.VentilFreqTime = Ajust.VentilFreqTime + 5;
        }
      if (enc1.isLeft())
     {
      lcd.clear();
     if (Ajust.VentilFreqTime>0) Ajust.VentilFreqTime = Ajust.VentilFreqTime - 5;
     }
   }

    if (Choise == 4)
   {   lcd.setCursor(0, 0);
       lcd.print("4.Fan Low Time");
       lcd.setCursor(5, 1);
       lcd.print(Ajust.VentilLowTime);
       lcd.print(":00 hours");
       if (enc1.isRight())
        {lcd.clear();
        if (Ajust.VentilLowTime<23) Ajust.VentilLowTime = Ajust.VentilLowTime + 1;
        }
      if (enc1.isLeft())
     {
      lcd.clear();
     if (Ajust.VentilLowTime>1) Ajust.VentilLowTime = Ajust.VentilLowTime - 1;
     }
   }

    if (Choise == 5)
   {   lcd.setCursor(0, 0);
       lcd.print("5.Fan High Time");
       lcd.setCursor(5, 1);
       lcd.print(Ajust.VentilHighTime);
       lcd.print(":00 hours");
       if (enc1.isRight())
        {lcd.clear();
        if (Ajust.VentilHighTime<23) Ajust.VentilHighTime = Ajust.VentilHighTime + 1;
        }
      if (enc1.isLeft())
     {
      lcd.clear();
     if (Ajust.VentilHighTime>1) Ajust.VentilHighTime = Ajust.VentilHighTime - 1;
     }
   }

    if (Choise == 6)
   {   lcd.setCursor(0, 0);
       lcd.print("6.Compress wrk. Time");
       lcd.setCursor(5, 1);
       lcd.print(Ajust.CompressTime);
       lcd.print(" min");
       if (enc1.isRight())
        {lcd.clear();
        Ajust.CompressTime = Ajust.CompressTime + 5;
        }
      if (enc1.isLeft())
     {
      lcd.clear();
     if (Ajust.CompressTime>0) Ajust.CompressTime = Ajust.CompressTime - 5;
     }
   }

    if (Choise == 7)
   {   lcd.setCursor(0, 0);
       lcd.print("7.Compress period Time");
       lcd.setCursor(5, 1);
       lcd.print(Ajust.CompressFreqTime);
       lcd.print(" min");
       if (enc1.isRight())
        {lcd.clear();
        Ajust.CompressFreqTime = Ajust.CompressFreqTime + 5;
        }
      if (enc1.isLeft())
     {
      lcd.clear();
     if (Ajust.CompressFreqTime>0) Ajust.CompressFreqTime = Ajust.CompressFreqTime - 5;
     }
   }

     if (Choise == 8)
   {   lcd.setCursor(0, 0);
       lcd.print("8.Compres Low Time");
       lcd.setCursor(5, 1);
       lcd.print(Ajust.CompressLowTime);
       lcd.print(":00 hours");
       if (enc1.isRight())
        {lcd.clear();
        if (Ajust.CompressLowTime<23) Ajust.CompressLowTime = Ajust.CompressLowTime + 1;
        }
      if (enc1.isLeft())
     {
      lcd.clear();
     if (Ajust.CompressLowTime>1) Ajust.CompressLowTime = Ajust.CompressLowTime - 1;
     }
   }
     if (Choise == 9)
   {   lcd.setCursor(0, 0);
       lcd.print("9.Compres High Time");
       lcd.setCursor(5, 1);
       lcd.print(Ajust.CompressHighTime);
       lcd.print(":00 hours");
       if (enc1.isRight())
        {lcd.clear();
        if (Ajust.CompressHighTime<23) Ajust.CompressHighTime = Ajust.CompressHighTime + 1;
        }
      if (enc1.isLeft())
     {
      lcd.clear();
     if (Ajust.CompressHighTime>1) Ajust.CompressHighTime = Ajust.CompressHighTime - 1;
     }
   }
     if (Choise == 10)
   {   lcd.setCursor(0, 0);
       lcd.print("10.Lamp Low Time");
       lcd.setCursor(5, 1);
       lcd.print(Ajust.LampaLowTime);
       lcd.print(":00 hours");
       if (enc1.isRight())
        {lcd.clear();
        if (Ajust.LampaLowTime<23) Ajust.LampaLowTime = Ajust.LampaLowTime + 1;
        }
      if (enc1.isLeft())
     {
      lcd.clear();
     if (Ajust.LampaLowTime>1) Ajust.LampaLowTime = Ajust.LampaLowTime - 1;
     }
   }
     if (Choise == 11)
   {   lcd.setCursor(0, 0);
       lcd.print("11.Lamp High Time");
       lcd.setCursor(5, 1);
       lcd.print(Ajust.LampaHighTime);
       lcd.print(":00 hours");
       if (enc1.isRight())
        {lcd.clear();
        if (Ajust.LampaHighTime<23) Ajust.LampaHighTime = Ajust.LampaHighTime + 1;
        }
      if (enc1.isLeft())
     {
      lcd.clear();
     if (Ajust.LampaHighTime>1) Ajust.LampaHighTime = Ajust.LampaHighTime - 1;
     }
   }

    if (Choise == 12)
  { lcd.setCursor(0, 0);
    lcd.print("F:");
    lcd.print("T");
    lcd.print(Ajust.VentilTime);
    lcd.print("F");
    lcd.print(Ajust.VentilFreqTime);
    lcd.print("L");
    lcd.print(Ajust.VentilLowTime);
    lcd.print("H");
    lcd.print(Ajust.VentilHighTime);
    lcd.setCursor(0, 1);
    lcd.print("C:");
    lcd.print("T");
    lcd.print(Ajust.CompressTime);
    lcd.print("F");
    lcd.print(Ajust.CompressFreqTime);
    lcd.print("L");
    lcd.print(Ajust.CompressLowTime);
    lcd.print("H");
    lcd.print(Ajust.CompressHighTime);
   }



   if (Choise == 13) //настройка часов
   {     lcd.setCursor(0, 1);
         lcd.print("Time: ");
         lcd.print(rtc.getTimeStr());
         ti = rtc.getTime();
         Minutess = ti.min;
         Hourss = ti.hour;

        if (enc1.isRight())
        {
               lcd.clear();
               if (Minutess<59)
               { Minutess = Minutess +1;
                rtc.setTime(Hourss, Minutess, 00);
               }
               else
               {
                 if (Hourss<23 )
                 {
                  Hourss = Hourss + 1;
                  rtc.setTime(Hourss, 00, 00);
                 }
                  else
                 { rtc.setTime(00, 00, 00);
                 };
               }
         }

           if (enc1.isLeft())
        {
               lcd.clear();
               if (Minutess>0)
               { Minutess = Minutess - 1;
                rtc.setTime(Hourss, Minutess, 00);
               }
               else
               {
                 if (Hourss>0)
                 {
                  Hourss = Hourss - 1;
                  rtc.setTime(Hourss, 59, 00);
                 }
                  else
                 { rtc.setTime(23, 59, 00);
                 };
               }
         }


    }




}

/***********************************основной экран****************************************/


  if (Choise == 14)
  {
   detectTemperature();
  ti = rtc.getTime(); //Заносим время в переменную ti

  //(Помним, что нумерация колонок и строк начинается с 0)
  temp =String(tempC)+" C";

  lcd.setCursor(0, 0); //Установим курсор в первую строку
  lcd.print(temp); //Вывод температуры
  lcd.setCursor(8, 0);  //Установим курсор в первую строку на 8 символ
  lcd.print(rtc.getTimeStr()); //Печатаем время
  lcd.setCursor(0, 1);  //Ставим курсор на вторую строку на 1 символ
  //выводим состояния устройств
  lcd.print("F"); // выводим состояние вентилятора
  lcd.print(Ven);
  lcd.print(" L"); // выводим состояние лампы
  lcd.print(Lam);
  lcd.print(" C"); // выводим состояние компрессора
  lcd.print(Comp);
  lcd.print(" H"); // выводим состояние нагревателя
  lcd.print(Hit);
  lcd.print(" T");
  temp = String (Ajust.temperature);
  lcd.print(temp); // выводим настроенную температуру
  };

/*********УПРАВЛЕНИЕ ГРОУБОКСОМ*******************************************************/


//управление лампой
if (ti.hour >= Ajust.LampaLowTime  && ti.hour < Ajust.LampaHighTime)
{ digitalWrite(Lampa, LOW);
Lam = 1;
}
else
{
  Lam = 0;
  digitalWrite(Lampa, HIGH);
};

Minutess = ti.hour*60 + ti.min; //количество минут на данный момент с начала суток

//управление вентиляторами
K = Minutess%( Ajust.VentilTime+ Ajust.VentilFreqTime);
if (ti.hour >= Ajust.VentilLowTime  && ti.hour < Ajust.VentilHighTime)
{
      if (K > Ajust.VentilTime)
     {
      digitalWrite(Ventil, LOW);
      Ven = 0;
      }
     else
     {
      digitalWrite(Ventil, HIGH);
      Ven = 1;
     };
}
else
{digitalWrite(Ventil, LOW);
Ven = 0;
};

//управление компрессором
K = Minutess%( Ajust.CompressTime+ Ajust.CompressFreqTime);
if (ti.hour >= Ajust.CompressLowTime  && ti.hour < Ajust.CompressHighTime)
{
      if (K > Ajust.CompressTime)
     {
      digitalWrite(Compressor, LOW);
      Comp = 0;
      }
     else
     {
      digitalWrite(Compressor, HIGH);
      Comp = 1;
     };
}
else
{digitalWrite(Compressor, LOW);
Comp = 0;
};

//управление нагревателем
if ((tempC)>20 && (tempC<32)) //если датчик не работает корректно регулировать периодами 2 мин вкл 4 мин выкл
{

if (tempC < Ajust.temperature - 0.01)
{digitalWrite(Hitter, HIGH);
Hit = 1;
};

if (tempC > Ajust.temperature + 0.01)
{digitalWrite(Hitter, LOW);
Hit=0;
};
}

else
{
  K = Minutess%6;
  if (K>2)
  {digitalWrite(Hitter, LOW);
   Hit=0;
  }
  else
  {digitalWrite(Hitter, HIGH);
   Hit=1;};

  };

/* тест для проверки работоспособности управления
 lcd.setCursor(5, 1);
 if (Choise == 1)
{digitalWrite(Lampa, LOW);
 lcd.print("Lampa");
}
 if (Choise == 2)
{digitalWrite(Hitter, HIGH);
lcd.print("Hitter");
}
 if (Choise == 3)
{digitalWrite(Compressor, HIGH);
lcd.print("Compresor");
}
 if (Choise == 4)
{digitalWrite(Ventil, HIGH);
lcd.print("Fan");
}
 if (Choise == 5)
 {lcd.print("All");
  digitalWrite(Ventil, HIGH);
  digitalWrite(Compressor, HIGH);
  digitalWrite(Hitter, HIGH);
  digitalWrite(Lampa, LOW);
  };

   if (Choise == 4)
{digitalWrite(Ventil, HIGH);
lcd.print("Fan");
}

 if (Choise == 6)
 {lcd.print("NONE");
  digitalWrite(Ventil, LOW);
  digitalWrite(Compressor, LOW);
  digitalWrite(Hitter, LOW);
  digitalWrite(Lampa, HIGH);
  };*/





} /***** конец программы*******/




// код для датчика
int detectTemperature()
{
  byte data[2];

  if (millis() - lastUpdateTime > TEMP_UPDATE_TIME)
  {
    lastUpdateTime = millis();
     sensors.requestTemperatures();
     delay (150);
    tempC = sensors.getTempCByIndex(0);

}
}

void getEEPROM () {                  // чтение данных
  if (EEPROM.read(0) != 110)
  {  // данных нет, записываем по умолчанию
  Ajust.temperature = 22.5; //1 Глобальная переменная для хранения нужного значения температуры
  Ajust.VentilTime = 10; //2 Глобальная переменная для хранения нвремени работы вентилятора
  Ajust.VentilFreqTime = 10; //3 Глобальная переменная для хранения частоты включения вентиляторов
  Ajust.VentilLowTime = 6; //4 Глобальная переменная для хранения  нижний лимит времени включения вентиляторов
  Ajust.VentilHighTime = 19; // 5 Глобальная переменная для хранения  верзний лимит времени включения вентиляторов
  Ajust.CompressTime = 10; // 6 Глобальная переменная для хранения времени работы компрессора
  Ajust.CompressFreqTime = 10;//7 Глобальная переменная для хранения частоты включения компрессора
  Ajust.CompressLowTime = 7;// 8 Глобальная переменная для хранения  нижний лимит времени включения компрессора
  Ajust.CompressHighTime = 19; //9 Глобальная переменная для хранения  верхний лимит времени включения компрессора
  Ajust.LampaLowTime = 7; // 10 Глобальная переменная для хранения  нижний лимит времени включения лампы
  Ajust.LampaHighTime = 19; //11 Глобальная переменная для хранения  верхний лимит времени включения лампы
  EEPROM.put(1, Ajust);
    EEPROM.update(0, 110); // отметили наличие данных
  }
  EEPROM.get(1, Ajust);
}
void saveEEPROM ()
{
EEPROM.put(1, Ajust); //для запамятовування розкоментувати
}
